<Project InitialTargets="BV_CheckSdkPropsImport">

  <!-- Signal that Sdk.targets has been imported. -->
  <PropertyGroup>
    <BV_SdkTargetsHasBeenImported>true</BV_SdkTargetsHasBeenImported>
  </PropertyGroup>

  <!--
    If Sdk.props has not been imported, BV_IsConfigured will be empty.
    Set it to false to skip importing modules and common targets.
  -->
  <PropertyGroup>
    <BV_IsConfigured Condition="'$(BV_IsConfigured)' != 'true'">false</BV_IsConfigured>
  </PropertyGroup>

  <!--
    Check that Sdk.props and Sdk.targets are from the same directory.
    Otherwise it probably means they've been imported from different SDK versions
    and may be incompatible with each other.
  -->
  <ItemGroup>
    <EvaluationError Condition="'$(BuildvanaSdkDirectory)' != '' And '$(BuildvanaSdkDirectory)' != '$(MSBuildThisFileDirectory)'"
                     Include="BVSDK1002"
                     Text="Sdk.props and Sdk.targets are in different directories." />
  </ItemGroup>

  <!-- Determine the kind of project. -->
  <PropertyGroup>
    <BV_IsNoTargetsProject>false</BV_IsNoTargetsProject>
    <BV_IsTestProject>false</BV_IsTestProject>
    <BV_IsLibraryProject>false</BV_IsLibraryProject>
    <BV_IsExeProject>false</BV_IsExeProject>
  </PropertyGroup>
  <Choose>
    <When Condition="'$(UsingMicrosoftNoTargetsSdk)' == 'true'">
      <PropertyGroup>
        <BV_IsNoTargetsProject>true</BV_IsNoTargetsProject>
      </PropertyGroup>
    </When>
    <When Condition="($(MSBuildProjectName.EndsWith('.Tests')) And '$(IsTestProject)' != 'false') Or '$(IsTestProject)' == 'true'">
      <PropertyGroup>
        <BV_IsTestProject>true</BV_IsTestProject>
      </PropertyGroup>
    </When>
    <When Condition="'$(OutputType)' == 'Library' And '$(BV_IsTestProject)' != 'true'">
      <PropertyGroup>
        <BV_IsLibraryProject>true</BV_IsLibraryProject>
      </PropertyGroup>
    </When>
    <When Condition="'$(OutputType)' == 'Exe' Or '$(OutputType)' == 'WinExe'">
      <PropertyGroup>
        <BV_IsExeProject>true</BV_IsExeProject>
      </PropertyGroup>
    </When>
  </Choose>

  <!-- Import BeforeCommon.targets, Common.targets, and AfterCommon.targets files  -->
  <ImportGroup Condition="$(BV_IsConfigured)">
    <Import Project="$(BuildvanaSdkDirectory)Import.BeforeCommon.targets.proj" />
    <Import Project="$(BuildvanaSdkDirectory)Import.Common.targets.proj" />
    <Import Project="$(BuildvanaSdkDirectory)Import.AfterCommon.targets.proj" />
  </ImportGroup>

  <!-- Import modules -->
  <ImportGroup Condition="$(BV_IsConfigured)">
    <Import Project="$(BuildvanaModulesDirectory)**\BeforeModules.targets" />
    <Import Project="$(BuildvanaModulesDirectory)**\Module.targets" />
    <Import Project="$(BuildvanaModulesDirectory)**\AfterModules.targets" />
  </ImportGroup>

  <!-- Import our package versions -->
  <Import Condition="$(BV_IsConfigured)" Project="$(MSBuildThisFileDirectory)PackageVersions.props" />

  <ItemGroup Condition="$(BV_IsConfigured)">

    <!-- Add a BV_PackageVersion item for Buildvana.SDK itself (for our source generators) -->
    <BV_PackageVersion Include="Buildvana.Sdk" Version="$(BuildvanaSdkVersion)" />

    <!-- Let PackageReference items override corresponding BV_PackageReference items -->
    <BV_PackageReference Remove="@(PackageReference)" />

    <!-- Let PackageVersion items override Version metadata in corresponding BV_PackageVersion items -->
    <BV_PackageVersion Update="@(PackageVersion)" Version="%(PackageVersion.Version)" Condition="'$(ManagePackageVersionsCentrally)' == 'true'" />

    <!-- Use BV_PackageVersion items to define Version metadata for BV_PackageReference items -->
    <BV_PackageReference Update="@(BV_PackageVersion)" Version="%(BV_PackageVersion.Version)" />

    <!--
      Transform BV_PackageReference items into PackageReference items.
      No need for PackageVersion items because our packages are defined implicitly.
    -->
    <PackageReference Include="@(BV_PackageReference)"
                      IsImplicitlyDefined="true" />

  </ItemGroup>

  <!-- Check whether Sdk.props has been imported.
       We cannot use EvaluationError for this,
       because the logic that handles it is in Sdk.props. -->
  <Target Name="BV_CheckSdkPropsImport">

    <Error Condition="'$(BV_SdkPropsHasBeenImported)' != 'true'"
           Code="BVSDK1000"
           Text="Sdk.props not imported."
           File="$(MSBuildProjectFullPath)" />

  </Target>

</Project>
