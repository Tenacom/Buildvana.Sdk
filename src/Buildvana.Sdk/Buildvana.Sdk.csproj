<Project Sdk="Microsoft.Build.NoTargets">

  <PropertyGroup>

    <!--
      IMPORTANT: TargetFramework must have the same value as in the source generators project,
      so we can use the OutputPath property (which is a relative path) to locate the source generators DLL.
    -->
    <TargetFramework>netstandard2.0</TargetFramework>

    <!-- Common properties -->
    <Title>Buildvana SDK</Title>
    <Summary>An opinionated, best-practices-based, CI- / CLI- / VS-friendly, MSBuild-powered build system for .NET projects.</Summary>
    <Description>$(Summary)</Description>

    <!-- NuGet package configuration -->
    <IsPackable>true</IsPackable>
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking> <!-- Remove the <dependencies> tag from .nupkg, because it makes the package "depend" on our TargetPlatform. -->
    <PackageType>MSBuildSdk</PackageType>
    <PackageTags>build msbuild sdk dotnet</PackageTags>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <DevelopmentDependency>true</DevelopmentDependency>
    <Serviceable>true</Serviceable>
    <MinClientVersion>4.3</MinClientVersion> <!-- Minimum NuGet client version supporting SemVer 2.0 -->
    <!-- Remove the <dependencies> tag from .nupkg, because it makes the package "depend" on our TargetPlatform. -->
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>

    <!--
      Prevent the SDK from adding an actual ProjectReference item for binary packages.
      Dependency on them is set in the solution file.
      The project system won't let you ProjectReference a multi-targeting project.
      See https://github.com/dotnet/msbuild/issues/4303
    -->
    <AddSyntheticProjectReferencesForSolutionDependencies>false</AddSyntheticProjectReferencesForSolutionDependencies>

  </PropertyGroup>

  <!-- Repository and documentation -->

  <PropertyGroup>
    <RepositoryType>git</RepositoryType>
    <RepositoryUrl>https://github.com/Buildvana/Buildvana.Sdk</RepositoryUrl>
    <PackageProjectUrl>https://github.com/Buildvana/Buildvana</PackageProjectUrl>
    <PackageReleaseNotes>Release notes are available at https://github.com/Buildvana/Buildvana.Sdk/blob/main/CHANGELOG.md</PackageReleaseNotes>
  </PropertyGroup>

  <!-- Package contents -->

  <PropertyGroup>
    <EnableDefaultContentItems>false</EnableDefaultContentItems>
    <EnableDefaultNoneItems>false</EnableDefaultNoneItems>
    <IncludeBuildOutput>false</IncludeBuildOutput>
  </PropertyGroup>

  <ItemGroup>
    <None Include="Modules\**\*" Pack="true" PackagePath="%(Identity)" />
    <None Include="Sdk\**\*" Pack="true" PackagePath="%(Identity)" />
  </ItemGroup>

  <!--
    =================================
    SDK VERSION / ROSLYN VERSION FILE
    =================================
  -->

  <PropertyGroup>
    <BeforePack>_GenerateSdkVersionProps;$(BeforePack)</BeforePack>
  </PropertyGroup>

  <Target Name="_GenerateSdkVersionProps">

    <PropertyGroup>
      <_SdkVersionPropsPath>$(IntermediateOutputPath)SdkVersion.props</_SdkVersionPropsPath>
      <_SdkVersionPropsXml>
        <Project>
          <PropertyGroup>
            <BuildvanaSdkVersion>$(Version)</BuildvanaSdkVersion>
            <BV_MinRoslynVersion>$(BV_MinRoslynVersion)</BV_MinRoslynVersion>
            <BV_MinRoslynVersionHint>$(BV_MinRoslynVersionHint)</BV_MinRoslynVersionHint>
          </PropertyGroup>
        </Project>
      </_SdkVersionPropsXml>
    </PropertyGroup>

    <WriteLinesToFile File="$(_SdkVersionPropsPath)" Lines="$(_SdkVersionPropsXml)" Overwrite="true" WriteOnlyWhenDifferent="true" />

    <ItemGroup>
      <Content Include="$(_SdkVersionPropsPath)" Visible="false" PackagePath="Sdk" />
    </ItemGroup>

  </Target>

  <!--
    =======================
    ALIASED PACKAGE CONTENT
    =======================
  -->

  <!-- Aliased content cannot be packaged directly. -->
  <ItemGroup>
    <None Include="Aliased\**\*" Pack="false" />
  </ItemGroup>

  <!--
    _AliasedContent items work backwards: each item's identity is its package target path,
    while the Source metadata is the path to the actual file being included in the package.
    This lets us add the same file to a package multiple times, as their identities will be different.
  -->
  <ItemGroup>
    <_AliasedContent Include="Sdk\Import.BeforeCommon.props.proj" Source="Aliased\ImportFiles.proj" />
    <_AliasedContent Include="Sdk\Import.Common.props.proj" Source="Aliased\ImportFiles.proj" />
    <_AliasedContent Include="Sdk\Import.AfterCommon.props.proj" Source="Aliased\ImportFiles.proj" />
    <_AliasedContent Include="Sdk\Import.BeforeCommon.targets.proj" Source="Aliased\ImportFiles.proj" />
    <_AliasedContent Include="Sdk\Import.Common.targets.proj" Source="Aliased\ImportFiles.proj" />
    <_AliasedContent Include="Sdk\Import.AfterCommon.targets.proj" Source="Aliased\ImportFiles.proj" />
  </ItemGroup>

  <!--
    Compute the path for the aliased content intermediate directory.
    IntermediateOutputPath is unknown to us at evaluation time, because it is set in a Microsoft SDK .targets file.
    Therefore we can only use it in a task.
  -->

  <Target Name="_ComputeAliasedContentPaths">

    <PropertyGroup>
      <_IntermediateAliasedContentDir>$(IntermediateOutputPath)AliasedContent\</_IntermediateAliasedContentDir>
    </PropertyGroup>

    <!--
      Now is the right time to actually evaluate sources for aliased content.
      All targets that depend on this target are executed after Build.
    -->
    <ItemGroup>
      <_AliasedContentSource_NonDistinct Include="%(_AliasedContent.Source)" />
      <_AliasedContentSource Include="@(_AliasedContentSource_NonDistinct-&gt;Distinct())" />
      <_AliasedContentSource_NonDistinct Remove="@(_AliasedContentSource_NonDistinct)" /> <!-- Free up some memory -->
    </ItemGroup>

    <ItemGroup>
      <_AliasedContentDestination Include="$([System.IO.Path]::Combine('$(_IntermediateAliasedContentDir)', '%(_AliasedContent.Identity)'))" />
    </ItemGroup>

  </Target>

  <!-- Create an intermediate folder with aliased content. Folder layout must mimic package layout. -->

  <Target Name="_CopyAliasedContentToIntermediateDirectory" DependsOnTargets="_ComputeAliasedContentPaths" Inputs="@(_AliasedContentSource)" Outputs="@(_AliasedContentDestination)">

    <MakeDir Directories="$(_IntermediateAliasedContentDir)" />

    <Copy SourceFiles="%(_AliasedContent.Source)" DestinationFiles="$([System.IO.Path]::Combine('$(_IntermediateAliasedContentDir)', '%(_AliasedContent.Identity)'))" />

  </Target>

  <!-- Clean aliased content intermediate directory on clean. -->

  <Target Name="_CleanAliasedContentIntermediateDirectory" AfterTargets="BeforeClean" DependsOnTargets="_CopyAliasedContentToIntermediateDirectory">

    <RemoveDir Directories="$(_IntermediateAliasedContentDir)" />

  </Target>

  <!--
    We need to execute _IncludeAliasedContentInPackage before GenerateNuspec.
    Declaring BeforeTargets="Pack" in our target is not sufficient, because Pack depends on GenerateNuspec,
    and dependency targets are executed before "before" targets.
    We cannot set PackDependsOn either, because NuGet.Build.Tasks.Pack.targets would later prepend GenerateNuspec to it.
    The only correct way is to add our target to BeforePack.
  -->
  <PropertyGroup>
    <BeforePack>$(BeforePack);_IncludeAliasedContentInPackage</BeforePack>
  </PropertyGroup>

  <Target Name="_IncludeAliasedContentInPackage" DependsOnTargets="_ComputeAliasedContentPaths;_CopyAliasedContentToIntermediateDirectory">

    <ItemGroup>
      <_CopiedAliasedContent Include="$(_IntermediateAliasedContentDir)**\*" />
      <Content Include="@(_CopiedAliasedContent)" Visible="false" PackagePath="%(RecursiveDir)%(Filename)%(Extension)" />
      <_CopiedAliasedContent Remove="@(_CopiedAliasedContent)" /> <!-- Free up some memory. -->
    </ItemGroup>

  </Target>

  <!--
    =================
    SOURCE GENERATORS
    =================
  -->

  <ItemGroup>
    <ProjectReference Include="..\Buildvana.Sdk.SourceGenerators\Buildvana.Sdk.SourceGenerators.csproj" />
  </ItemGroup>

  <!--
    This being a NoTargets project, the output of a referenced project is not copied to this project's
    output directory, so we must retrieve it from its original location.
    We can use OutputPath (whose value is computed even in NoTargets projects) because we have the same
    TargetFramework as the referenced project.
  -->
  <ItemGroup>
    <None Include="..\Buildvana.Sdk.SourceGenerators\$(OutputPath)\Buildvana.Sdk.SourceGenerators.dll"
          Pack="true"
          PackagePath="analyzers/dotnet/$(BV_SourceGeneratorsPackageFolder)" />
  </ItemGroup>

</Project>
