// ---------------------------------------------------------------------------------------
// Copyright (C) Riccardo De Agostini and contributors. All rights reserved.
// Licensed under the MIT license.
// See the LICENSE file in the project root for full license information.
//
// Part of this file may be third-party code, distributed under a compatible license.
// See the THIRD-PARTY-NOTICES file in the project root for third-party copyright notices.
// ---------------------------------------------------------------------------------------

using System.Text;
using Buildvana.Sdk.SourceGenerators.Internal;
using Microsoft.CodeAnalysis;

namespace Buildvana.Sdk.SourceGenerators;

[Generator(LanguageNames.CSharp, LanguageNames.VisualBasic, LanguageNames.FSharp)]
public class AdditionalAssemblyInfoGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var languageProvider = context.ParseOptionsProvider.Select((p, _) => p.Language);
        var attributeValuesProvider = context
                                     .AnalyzerConfigOptionsProvider
                                     .Select((p, _)
                                          => new AdditionalAssemblyInfoValues(
                                              p.GetBooleanMSBuildProperty("CLSCompliant"),
                                              p.GetBooleanMSBuildProperty("ComVisible")));

        var finalProvider = languageProvider.Combine(attributeValuesProvider);
        context.RegisterSourceOutput(finalProvider, (spc, data) =>
        {
            var (language, values) = data;
            var sb = new StringBuilder()
                    .AppendAutoGenerated(language)
                    .AppendBooleanAssemblyAttribute(language, "System.CLSCompliant", values.CLSCompliant)
                    .AppendBooleanAssemblyAttribute(language, "System.Runtime.InteropServices.ComVisible", values.ComVisible);

            spc.AddSource("BV_AssemblyAttributes", sb.ToString());
        });
    }
}
