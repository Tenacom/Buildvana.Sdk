// ---------------------------------------------------------------------------------------
// Copyright (C) Riccardo De Agostini and contributors. All rights reserved.
// Licensed under the MIT license.
// See the LICENSE file in the project root for full license information.
//
// Part of this file may be third-party code, distributed under a compatible license.
// See the THIRD-PARTY-NOTICES file in the project root for third-party copyright notices.
// ---------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Buildvana.Sdk.CodeGeneration.Configuration;
using Microsoft.CodeAnalysis;

namespace Buildvana.Sdk.CodeGeneration.Internal;

internal abstract class CodeGenerator<TSyntaxNode> : CodeGenerator
    where TSyntaxNode : SyntaxNode
{
    protected sealed override string GenerateCodeCore(IEnumerable<CodeFragment> codeFragments)
    {
        var syntaxNodes = new List<TSyntaxNode>();
        syntaxNodes.AddRange(codeFragments.Select(GenerateCodeFragment));
        var compilationUnit = GenerateCompilationUnit(syntaxNodes);

        var initialComment = GenerateLineComment("<auto-generated />");
        compilationUnit = compilationUnit.HasLeadingTrivia
            ? compilationUnit.WithLeadingTrivia(compilationUnit.GetLeadingTrivia().Insert(0, initialComment))
            : compilationUnit.WithLeadingTrivia(default(SyntaxTriviaList).Add(initialComment));

        return compilationUnit
            .NormalizeWhitespace()
            .ToFullString();
    }

    protected abstract SyntaxTrivia GenerateLineComment(string comment);

    protected abstract TSyntaxNode GenerateAssemblyAttribute(AssemblyAttributeFragment assemblyAttribute);

    protected abstract TSyntaxNode GenerateThisAssemblyClass(ThisAssemblyClassFragment thisAssemblyClass);

    protected abstract TSyntaxNode GenerateCompilationUnit(IEnumerable<TSyntaxNode> syntaxNodes);

    private TSyntaxNode GenerateCodeFragment(CodeFragment? fragment)
        => fragment switch {
            AssemblyAttributeFragment assemblyAttribute => GenerateAssemblyAttribute(assemblyAttribute),
            ThisAssemblyClassFragment thisAssemblyClass => GenerateThisAssemblyClass(thisAssemblyClass),
            null => throw new ArgumentNullException(nameof(fragment)),
            _ => throw new ArgumentException($"Unknown code fragment class '{fragment.GetType().Name}' passed to {nameof(GenerateCodeFragment)}.", nameof(fragment)),
        };
}
